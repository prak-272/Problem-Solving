class Trie{ 
    public:

    int score;
    Trie* children[26];
    
    Trie(){
        score= 0;

        for(int i=0;i<26;i++){
            children[i] = NULL;
        }
    }

};

class Solution {
public:
    
    void insert(Trie* node,string word){
        
        int n = word.size();

        for(int i=0;i<n;i++){
            if(node->children[word[i]-'a'] == NULL)
               node->children[word[i]-'a'] = new Trie();

            node = node->children[word[i]-'a'];
            node->score++;   
        }

    }

    void prefix(Trie* node,string word,vector<int>& result){
       
        int n = word.size();

        int solution = 0;

        for(int i=0;i<n;i++){
            node = node->children[word[i]-'a'];
            solution += node->score;
        }

        result.push_back(solution);   

    }
    
    vector<int> sumPrefixScores(vector<string>& words) {
        
        Trie* root = new Trie();

        for(auto word:words)
          insert(root,word);

        vector<int> result;
        
        for(auto word:words){
            prefix(root,word,result);
        }
            
        return result;  

    }
};
