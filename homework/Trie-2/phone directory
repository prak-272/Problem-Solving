//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Trie{
    
    public:
    
    set<string> prefix;
    
    Trie* children[26];
    
    Trie(){
        for(int i=0;i<26;i++)
          children[i] = NULL;
    }
    
};



class Solution{
public:
    
    void insert(Trie* node,string word,int in){
        
        int n = word.size();
        
        for(int i=0;i<n;i++){
            if(node->children[word[i]-'a'] == NULL)
              node->children[word[i]-'a'] = new Trie();
            
            node = node->children[word[i]-'a'];
            node->prefix.insert(word);
        }
        
    }
    
    
    vector<vector<string>> find_string(Trie* node,string word,string contact[]){
        
        vector<vector<string>> ans;
        
        int n = word.size();
        
        bool flag = true;
        
        for(int i=0;i<n;i++){
            
            if(node->children[word[i]-'a'] == NULL){
                flag = false;
            }
            
            vector<string> curr;
            
            if(flag == false)
              curr.push_back("0");
            else{
                
                node = node->children[word[i]-'a'];
                
                for(auto in:node->prefix)
                  curr.push_back(in);
                  
                
            } 
            
            ans.push_back(curr);
         
        }
        
        return ans;
        
    }
    
    
    vector<vector<string>> displayContacts(int n, string contact[], string k)
    {
        // code here
         
        sort(contact,contact+n); 
        
       Trie* root = new Trie();
    
        
        for(int i=0;i<n;i++)
          insert(root,contact[i],i);
        
        return find_string(root,k,contact);
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        string contact[n], s;
        for(int i = 0;i < n;i++)
            cin>>contact[i];
        cin>>s;
        
        Solution ob;
        vector<vector<string>> ans = ob.displayContacts(n, contact, s);
        for(int i = 0;i < ans.size();i++){
            for(auto u: ans[i])
                cout<<u<<" ";
            cout<<"\n";
        }
    }
    return 0;
}
// } Driver Code Ends
