class Solution {
public:
    
    vector<vector<int>> directions = {{0,1},{0,-1},{1,0},{-1,0}}; 

    void dfs(int i,int j,vector<vector<char>>& board,vector<vector<bool>>& visi){
           
        int n = board.size();
        int m = board[0].size();     

          if(i >= n || j >= m ||  i< 0 || j < 0 || visi[i][j] == true || board[i][j] != 'O')
            return;

          visi[i][j] = true;

          for(auto dir:directions){
             
             int new_i = i + dir[0];
             int new_j = j + dir[1];

             dfs(new_i,new_j,board,visi);

          }
         
    }
    
    void solve(vector<vector<char>>& board) {
        
        int n = board.size();
        int m = board[0].size();

        vector<vector<bool>> visi(n,vector<bool>(m,false));

        for(int i=0;i<n;i++)
          if(board[i][0] == 'O')
            dfs(i,0,board,visi);

        for(int i=0;i<n;i++)
          if(board[i][m-1] == 'O')
            dfs(i,m-1,board,visi); 

        for(int j=0;j<m;j++)
            if(board[0][j] == 'O')
              dfs(0,j,board,visi);

        for(int j=0;j<m;j++)
            if(board[n-1][j] == 'O')
              dfs(n-1,j,board,visi);     

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j] == 'O' && visi[i][j] == false)
                  board[i][j] = 'X';
            }
        }                  

    }
};
