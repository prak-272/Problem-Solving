class Solution {
public:
    
    vector<vector<int>> directions = {{0,1},{0,-1},{1,0},{-1,0}};
    
    int orangesRotting(vector<vector<int>>& grid) {
        
        int n = grid.size();
        int m = grid[0].size();

        queue<vector<int>> q;
        vector<vector<bool>> visi(n,vector<bool> (m,false));

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2){
                    q.push({i,j,0});
                    visi[i][j] = true;
                }
            }
        }

        int maxi = 0;

        while(!q.empty()){
           
           vector<int> f = q.front();
           maxi = max(maxi,f[2]);

           q.pop();

           for(auto dir:directions){
               
               int i = f[0]+dir[0];
               int j = f[1]+dir[1];

               if(i >= 0 && j >= 0 && i < n && j < m && !visi[i][j] && grid[i][j] == 1){
                   q.push({i,j,f[2]+1});
                   visi[i][j] = true;
               }

           }

        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1 && visi[i][j] == false)
                  return -1;
            }
        }

        return maxi;

    }
};
