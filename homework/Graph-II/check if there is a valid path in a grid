class Solution {
public:
    
    void dfs(int i,int j,vector<vector<bool>>& visi,vector<vector<int>>& grid){
        
        int n = grid.size();
        int m = grid[0].size();  

        if(visi[i][j] == true)
           return;

        cout  << i << "    "  << j << endl;  

        visi[i][j] = true;

        if(grid[i][j] == 1){
            if((j+1<m)&&(grid[i][j+1] == 3 || grid[i][j+1] == 1 || grid[i][j+1] == 5))
              dfs(i,j+1,visi,grid);
            if((j-1>=0)&&(grid[i][j-1] == 4 || grid[i][j-1] == 1 || grid[i][j-1] == 6))
              dfs(i,j-1,visi,grid);   
        }
        else if(grid[i][j] == 2){
            if((i-1>=0)&&(grid[i-1][j] == 3 || grid[i-1][j] == 2 || grid[i-1][j] == 4))
              dfs(i-1,j,visi,grid);
            if((i+1<n)&&(grid[i+1][j] == 5 || grid[i+1][j] == 2 ||  grid[i+1][j] == 6))
              dfs(i+1,j,visi,grid);
        }
        else if(grid[i][j] == 3){
             if((j-1>=0)&&(grid[i][j-1] == 1 || grid[i][j-1] == 4 || grid[i][j-1] == 6))
              dfs(i,j-1,visi,grid);
            if((i+1<n)&&(grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6))
              dfs(i+1,j,visi,grid);
        }
        else if(grid[i][j] == 4){
            if((j+1<m)&&(grid[i][j+1] == 1 || grid[i][j+1] == 3 || grid[i][j+1] == 5))
              dfs(i,j+1,visi,grid);
            if((i+1<n)&&(grid[i+1][j] == 2 || grid[i+1][j] == 5 || grid[i+1][j] == 6))
              dfs(i+1,j,visi,grid);
        }
        else if(grid[i][j] == 5){
            if((i-1>=0)&&(grid[i-1][j] == 3 || grid[i-1][j] == 4 || grid[i-1][j] == 2))
              dfs(i-1,j,visi,grid);
            if((j-1>=0)&&(grid[i][j-1] == 4 || grid[i][j-1] == 1 || grid[i][j-1] == 6))
              dfs(i,j-1,visi,grid);
        }
        else if(grid[i][j] == 6){
             if((i-1>=0)&&(grid[i-1][j] == 3 || grid[i-1][j] == 4 || grid[i-1][j] == 2))
              dfs(i-1,j,visi,grid);
            if((j+1<m)&&(grid[i][j+1] == 1 || grid[i][j+1] == 5 || grid[i][j+1] == 3))
              dfs(i,j+1,visi,grid);
        }


    }
    
    bool hasValidPath(vector<vector<int>>& grid) {
        
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<bool>> visi(n,vector<bool>(m,false));

        dfs(0,0,visi,grid);

        return visi[n-1][m-1];

    }
};
