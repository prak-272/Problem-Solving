/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* constructBinarySearchTree(vector<int>& preorder,int pstart,int pend){
        
        if(pstart > pend)return NULL;

        TreeNode* root = new TreeNode(preorder[pstart]);
        
        int p = pend+1;

        for(int i=pstart+1;i<=pend;i++){
            if(preorder[i] > preorder[pstart]){
                p = i;
                break;
            }
        }

        root->left = constructBinarySearchTree(preorder,pstart+1,p-1);
     
  root->right = constructBinarySearchTree(preorder,p,pend);
        

        return root;

    }

    TreeNode* bstFromPreorder(vector<int>& preorder) {
        
        int n = preorder.size();

        return constructBinarySearchTree(preorder,0,n-1);

    }
};
