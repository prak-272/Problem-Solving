#include<bits/stdc++.h>
using namespace std;
 
#define ll long long
#define endl '\n'

#define ld long double
#define ull unsigned long long
 
const ll MOD = 1e9 + 7;
const ll INF = LLONG_MAX >> 1;

#ifndef ONLINE_JUDEGE
#define debug(a) cerr << #a << " "; print(a); cerr << endl;
#else
#define debug(a)
#endif

void print(int a){ cerr << a;}
void print(ll a ){cerr <<  a;}
void print(ld a ){cerr << a;}
void print(string a){ cerr << a;}
void pirnt(bool a ){ cerr << a;}
void print(float a){cerr << a;}
void print( double a){ cerr << a;}
void print( char a) { cerr << a; }
void print(ull a){cerr << a;}

template<class t,class v> void print( pair<t,v> p);
template<class t> void print( vector<t> v1);
template<class t> void print( set<t> s);
template<class t,class v> void print( map<t,v> mp);
template<class t> void print( multiset<t> ms);
template<class t,class v>void print(pair<t,v> p){ cerr << "{" << p.first << "," << p.second << "}"; }
template<class t>void print( vector<t> v1){ cerr << "["; for(auto i:v1){ print(i); cerr << " ";} cerr << "]";}
template<class t> void print(set<t> s){ cerr << "["; for(auto i:s){print(i); cerr << " ";} cerr << "]";}
template<class t,class v> void print(map<t,v> mp){ cerr << "["; for(auto i:mp){ print(i); cerr << " ";} cerr << "]";}
template<class t> void print(multiset<t> ms){ cerr << "["; for(auto i:ms) { print(i); cerr << " "; } cerr << "]";}


bool checker(ll m,vector<ll> &fr,ll a){
	ll food = 0;
	for(auto i:fr)
	   food += i/m;

	return (food >= a);   
}

void solve()
{
   ll n; cin >> n;

   vector<ll> b(n);
   for(ll i=0;i<n;i++)cin >> b[i];

   ll a; cin >> a;

   vector<ll> fr(100000);
   for(ll i=0;i<n;i++)
      fr[b[i]]++;


   ll l= 0;
   ll r = 1e9 + 1;

   while(r-l > 1){
	   ll m = l + (r-l)/2;

	   if(checker(m,fr,a))l=m;
	   else r=m;
   }

   cout << l;
   cout << endl;

}
 
signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
     
    #ifndef ONLINE_JUDGE
     freopen("Error.txt" , "w" ,stderr);
    #endif 
      
 
    ll tc;
    tc =1;
 
    while(tc--){
    
        solve();
 
    }
 
 
}

