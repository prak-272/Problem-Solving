/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    using ll = long long;

    int res = 0;
    map<ll,int> mp;

    void count(TreeNode* node,int s,ll sum){
        if(node == NULL)return;

        sum += node->val;

        cout << (sum == s);
        cout << (mp.find(sum-s) != mp.end());

        cout << endl;

        if(sum == s)res++;
        if(mp.find(sum-s) != mp.end())res += mp[sum-s];

        mp[sum]++;

        count(node->left,s,sum);
        count(node->right,s,sum);

        mp[sum]--;

    }


    int pathSum(TreeNode* root, int s) {

        count(root,s,0);
        return res;
        
    }
};
