class Solution {
public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        
         vector<int> adja_list[n];
        vector<int> indegree(n,0);

        for(auto p:edges){
            adja_list[p[0]].push_back(p[1]);
            indegree[p[1]]++;
        }

        queue<int> q;

        for(int i=0;i<n;i++){
            if(indegree[i] == 0)
              q.push(i);
        }

        vector<set<int>> answer(n); 

        while(!q.empty()){
            int v = q.front();
            q.pop();

            for(auto neighbour:adja_list[v]){
                for(auto i:answer[v])
                  answer[neighbour].insert(i);

                answer[neighbour].insert(v);

                if(--indegree[neighbour] == 0)
                  q.push(neighbour);  
            }
        }

        vector<vector<int>> solution;

        for(int i=0;i<n;i++){
            vector<int> temp;

            for(auto p:answer[i])
              temp.push_back(p);

            solution.push_back(temp);  
        }

        return solution;

    }
};
