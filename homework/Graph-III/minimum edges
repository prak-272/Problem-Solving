//{ Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++
#include<bits/stdc++.h>
class Solution{
    public:
        int minimumEdgeReversal(vector<vector<int>> &edges,int n,int src,int dst)
        {
             vector<pair<int,int>> adja_list[n+1];
             
             for(auto e:edges){
                 adja_list[e[0]].push_back({e[1],0});
                 adja_list[e[1]].push_back({e[0],1});
             }
             
             int inf = 1e7;
             
             list<int> l;
             vector<int> level(n+1,inf);
             
             l.push_back(src);
             level[src] = 0;
             
             while(!l.empty()){
                 int v = l.front();
                 l.pop_front();
                 
                 if(v == dst)
                   return level[v];
                 
                 for(auto neighbour:adja_list[v]){
                     int node = neighbour.first;
                     int weight = neighbour.second;
                     
                     if(level[v] + weight < level[node]){
                         level[node] = level[v] + weight;
                         
                         if(weight == 1)
                           l.push_back(node);
                         else
                           l.push_front(node);
                     }
                 }
             }
             
             return -1;
             
             
        }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,m;
        cin>>n>>m;
        vector<vector<int>> edges(m,vector<int> (2));
        for(auto &j:edges)
            for(auto &i:j)
                cin>>i;
        int src,dst;
        cin>>src>>dst;
        Solution s;
        cout<<s.minimumEdgeReversal(edges,n,src,dst)<<endl;
    }
    return 0;
}
// } Driver Code Ends
